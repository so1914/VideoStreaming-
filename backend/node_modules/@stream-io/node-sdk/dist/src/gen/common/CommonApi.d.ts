import { ApiClient, StreamResponse } from '../../gen-imports';
import { BlockUsersRequest, BlockUsersResponse, CheckExternalStorageResponse, CheckPushRequest, CheckPushResponse, CheckSNSRequest, CheckSNSResponse, CheckSQSRequest, CheckSQSResponse, CreateBlockListRequest, CreateBlockListResponse, CreateDeviceRequest, CreateExternalStorageRequest, CreateExternalStorageResponse, CreateGuestRequest, CreateGuestResponse, CreateImportRequest, CreateImportResponse, CreateImportURLRequest, CreateImportURLResponse, CreatePollOptionRequest, CreatePollRequest, CreateRoleRequest, CreateRoleResponse, DeactivateUserRequest, DeactivateUserResponse, DeactivateUsersRequest, DeactivateUsersResponse, DeleteExternalStorageResponse, DeleteUsersRequest, DeleteUsersResponse, ExportUserResponse, ExportUsersRequest, ExportUsersResponse, FileUploadRequest, FileUploadResponse, GetApplicationResponse, GetBlockListResponse, GetBlockedUsersResponse, GetCustomPermissionResponse, GetImportResponse, GetOGResponse, GetRateLimitsResponse, GetTaskResponse, ImageUploadRequest, ImageUploadResponse, ListBlockListResponse, ListDevicesResponse, ListExternalStorageResponse, ListImportsResponse, ListPermissionsResponse, ListPushProvidersResponse, ListRolesResponse, PollOptionResponse, PollResponse, PollVotesResponse, QueryPollVotesRequest, QueryPollsRequest, QueryPollsResponse, QueryUsersPayload, QueryUsersResponse, ReactivateUserRequest, ReactivateUserResponse, ReactivateUsersRequest, ReactivateUsersResponse, Response, RestoreUsersRequest, SharedLocationResponse, SharedLocationsResponse, UnblockUsersRequest, UnblockUsersResponse, UpdateAppRequest, UpdateBlockListRequest, UpdateBlockListResponse, UpdateExternalStorageRequest, UpdateExternalStorageResponse, UpdateLiveLocationRequest, UpdatePollOptionRequest, UpdatePollPartialRequest, UpdatePollRequest, UpdateUsersPartialRequest, UpdateUsersRequest, UpdateUsersResponse, UpsertPushProviderRequest, UpsertPushProviderResponse } from '../models';
export declare class CommonApi {
    readonly apiClient: ApiClient;
    constructor(apiClient: ApiClient);
    getApp(): Promise<StreamResponse<GetApplicationResponse>>;
    updateApp(request?: UpdateAppRequest): Promise<StreamResponse<Response>>;
    listBlockLists(request?: {
        team?: string;
    }): Promise<StreamResponse<ListBlockListResponse>>;
    createBlockList(request: CreateBlockListRequest): Promise<StreamResponse<CreateBlockListResponse>>;
    deleteBlockList(request: {
        name: string;
        team?: string;
    }): Promise<StreamResponse<Response>>;
    getBlockList(request: {
        name: string;
        team?: string;
    }): Promise<StreamResponse<GetBlockListResponse>>;
    updateBlockList(request: UpdateBlockListRequest & {
        name: string;
    }): Promise<StreamResponse<UpdateBlockListResponse>>;
    checkPush(request?: CheckPushRequest): Promise<StreamResponse<CheckPushResponse>>;
    checkSNS(request?: CheckSNSRequest): Promise<StreamResponse<CheckSNSResponse>>;
    checkSQS(request?: CheckSQSRequest): Promise<StreamResponse<CheckSQSResponse>>;
    deleteDevice(request: {
        id: string;
        user_id?: string;
    }): Promise<StreamResponse<Response>>;
    listDevices(request?: {
        user_id?: string;
    }): Promise<StreamResponse<ListDevicesResponse>>;
    createDevice(request: CreateDeviceRequest): Promise<StreamResponse<Response>>;
    exportUsers(request: ExportUsersRequest): Promise<StreamResponse<ExportUsersResponse>>;
    listExternalStorage(): Promise<StreamResponse<ListExternalStorageResponse>>;
    createExternalStorage(request: CreateExternalStorageRequest): Promise<StreamResponse<CreateExternalStorageResponse>>;
    deleteExternalStorage(request: {
        name: string;
    }): Promise<StreamResponse<DeleteExternalStorageResponse>>;
    updateExternalStorage(request: UpdateExternalStorageRequest & {
        name: string;
    }): Promise<StreamResponse<UpdateExternalStorageResponse>>;
    checkExternalStorage(request: {
        name: string;
    }): Promise<StreamResponse<CheckExternalStorageResponse>>;
    createGuest(request: CreateGuestRequest): Promise<StreamResponse<CreateGuestResponse>>;
    createImportURL(request?: CreateImportURLRequest): Promise<StreamResponse<CreateImportURLResponse>>;
    listImports(): Promise<StreamResponse<ListImportsResponse>>;
    createImport(request: CreateImportRequest): Promise<StreamResponse<CreateImportResponse>>;
    getImport(request: {
        id: string;
    }): Promise<StreamResponse<GetImportResponse>>;
    getOG(request: {
        url: string;
    }): Promise<StreamResponse<GetOGResponse>>;
    listPermissions(): Promise<StreamResponse<ListPermissionsResponse>>;
    getPermission(request: {
        id: string;
    }): Promise<StreamResponse<GetCustomPermissionResponse>>;
    createPoll(request: CreatePollRequest): Promise<StreamResponse<PollResponse>>;
    updatePoll(request: UpdatePollRequest): Promise<StreamResponse<PollResponse>>;
    queryPolls(request?: QueryPollsRequest & {
        user_id?: string;
    }): Promise<StreamResponse<QueryPollsResponse>>;
    deletePoll(request: {
        poll_id: string;
        user_id?: string;
    }): Promise<StreamResponse<Response>>;
    getPoll(request: {
        poll_id: string;
        user_id?: string;
    }): Promise<StreamResponse<PollResponse>>;
    updatePollPartial(request: UpdatePollPartialRequest & {
        poll_id: string;
    }): Promise<StreamResponse<PollResponse>>;
    createPollOption(request: CreatePollOptionRequest & {
        poll_id: string;
    }): Promise<StreamResponse<PollOptionResponse>>;
    updatePollOption(request: UpdatePollOptionRequest & {
        poll_id: string;
    }): Promise<StreamResponse<PollOptionResponse>>;
    deletePollOption(request: {
        poll_id: string;
        option_id: string;
        user_id?: string;
    }): Promise<StreamResponse<Response>>;
    getPollOption(request: {
        poll_id: string;
        option_id: string;
        user_id?: string;
    }): Promise<StreamResponse<PollOptionResponse>>;
    queryPollVotes(request: QueryPollVotesRequest & {
        poll_id: string;
        user_id?: string;
    }): Promise<StreamResponse<PollVotesResponse>>;
    listPushProviders(): Promise<StreamResponse<ListPushProvidersResponse>>;
    upsertPushProvider(request?: UpsertPushProviderRequest): Promise<StreamResponse<UpsertPushProviderResponse>>;
    deletePushProvider(request: {
        type: string;
        name: string;
    }): Promise<StreamResponse<Response>>;
    getRateLimits(request?: {
        server_side?: boolean;
        android?: boolean;
        ios?: boolean;
        web?: boolean;
        endpoints?: string;
    }): Promise<StreamResponse<GetRateLimitsResponse>>;
    listRoles(): Promise<StreamResponse<ListRolesResponse>>;
    createRole(request: CreateRoleRequest): Promise<StreamResponse<CreateRoleResponse>>;
    deleteRole(request: {
        name: string;
    }): Promise<StreamResponse<Response>>;
    getTask(request: {
        id: string;
    }): Promise<StreamResponse<GetTaskResponse>>;
    deleteFile(request?: {
        url?: string;
    }): Promise<StreamResponse<Response>>;
    uploadFile(request?: FileUploadRequest): Promise<StreamResponse<FileUploadResponse>>;
    deleteImage(request?: {
        url?: string;
    }): Promise<StreamResponse<Response>>;
    uploadImage(request?: ImageUploadRequest): Promise<StreamResponse<ImageUploadResponse>>;
    queryUsers(request?: {
        payload?: QueryUsersPayload;
    }): Promise<StreamResponse<QueryUsersResponse>>;
    updateUsersPartial(request: UpdateUsersPartialRequest): Promise<StreamResponse<UpdateUsersResponse>>;
    updateUsers(request: UpdateUsersRequest): Promise<StreamResponse<UpdateUsersResponse>>;
    getBlockedUsers(request?: {
        user_id?: string;
    }): Promise<StreamResponse<GetBlockedUsersResponse>>;
    blockUsers(request: BlockUsersRequest): Promise<StreamResponse<BlockUsersResponse>>;
    deactivateUsers(request: DeactivateUsersRequest): Promise<StreamResponse<DeactivateUsersResponse>>;
    deleteUsers(request: DeleteUsersRequest): Promise<StreamResponse<DeleteUsersResponse>>;
    getUserLiveLocations(request?: {
        user_id?: string;
    }): Promise<StreamResponse<SharedLocationsResponse>>;
    updateLiveLocation(request: UpdateLiveLocationRequest & {
        user_id?: string;
    }): Promise<StreamResponse<SharedLocationResponse>>;
    reactivateUsers(request: ReactivateUsersRequest): Promise<StreamResponse<ReactivateUsersResponse>>;
    restoreUsers(request: RestoreUsersRequest): Promise<StreamResponse<Response>>;
    unblockUsers(request: UnblockUsersRequest): Promise<StreamResponse<UnblockUsersResponse>>;
    deactivateUser(request: DeactivateUserRequest & {
        user_id: string;
    }): Promise<StreamResponse<DeactivateUserResponse>>;
    exportUser(request: {
        user_id: string;
    }): Promise<StreamResponse<ExportUserResponse>>;
    reactivateUser(request: ReactivateUserRequest & {
        user_id: string;
    }): Promise<StreamResponse<ReactivateUserResponse>>;
}
