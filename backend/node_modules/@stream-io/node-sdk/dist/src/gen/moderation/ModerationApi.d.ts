import { ApiClient, StreamResponse } from '../../gen-imports';
import { BanRequest, BanResponse, BulkImageModerationRequest, BulkImageModerationResponse, CheckRequest, CheckResponse, CustomCheckRequest, CustomCheckResponse, DeleteModerationConfigResponse, DeleteModerationTemplateResponse, FlagRequest, FlagResponse, GetConfigResponse, GetReviewQueueItemResponse, MuteRequest, MuteResponse, QueryFeedModerationTemplatesResponse, QueryModerationConfigsRequest, QueryModerationConfigsResponse, QueryModerationFlagsRequest, QueryModerationFlagsResponse, QueryModerationLogsRequest, QueryModerationLogsResponse, QueryReviewQueueRequest, QueryReviewQueueResponse, SubmitActionRequest, SubmitActionResponse, UnbanRequest, UnbanResponse, UnmuteRequest, UnmuteResponse, UpsertConfigRequest, UpsertConfigResponse, UpsertModerationTemplateRequest, UpsertModerationTemplateResponse } from '../models';
export declare class ModerationApi {
    readonly apiClient: ApiClient;
    constructor(apiClient: ApiClient);
    ban(request: BanRequest): Promise<StreamResponse<BanResponse>>;
    bulkImageModeration(request: BulkImageModerationRequest): Promise<StreamResponse<BulkImageModerationResponse>>;
    check(request: CheckRequest): Promise<StreamResponse<CheckResponse>>;
    upsertConfig(request: UpsertConfigRequest): Promise<StreamResponse<UpsertConfigResponse>>;
    deleteConfig(request: {
        key: string;
        team?: string;
    }): Promise<StreamResponse<DeleteModerationConfigResponse>>;
    getConfig(request: {
        key: string;
        team?: string;
    }): Promise<StreamResponse<GetConfigResponse>>;
    queryModerationConfigs(request?: QueryModerationConfigsRequest): Promise<StreamResponse<QueryModerationConfigsResponse>>;
    customCheck(request: CustomCheckRequest): Promise<StreamResponse<CustomCheckResponse>>;
    v2DeleteTemplate(): Promise<StreamResponse<DeleteModerationTemplateResponse>>;
    v2QueryTemplates(): Promise<StreamResponse<QueryFeedModerationTemplatesResponse>>;
    v2UpsertTemplate(request: UpsertModerationTemplateRequest): Promise<StreamResponse<UpsertModerationTemplateResponse>>;
    flag(request: FlagRequest): Promise<StreamResponse<FlagResponse>>;
    queryModerationFlags(request?: QueryModerationFlagsRequest): Promise<StreamResponse<QueryModerationFlagsResponse>>;
    queryModerationLogs(request?: QueryModerationLogsRequest): Promise<StreamResponse<QueryModerationLogsResponse>>;
    mute(request: MuteRequest): Promise<StreamResponse<MuteResponse>>;
    queryReviewQueue(request?: QueryReviewQueueRequest): Promise<StreamResponse<QueryReviewQueueResponse>>;
    getReviewQueueItem(request: {
        id: string;
    }): Promise<StreamResponse<GetReviewQueueItemResponse>>;
    submitAction(request: SubmitActionRequest): Promise<StreamResponse<SubmitActionResponse>>;
    unban(request: UnbanRequest & {
        target_user_id: string;
        channel_cid?: string;
        created_by?: string;
    }): Promise<StreamResponse<UnbanResponse>>;
    unmute(request: UnmuteRequest): Promise<StreamResponse<UnmuteResponse>>;
}
